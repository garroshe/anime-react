{"version":3,"file":"static/js/198.07446def.chunk.js","mappings":"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","sources":["components/charsSlider/CharsSlider.js","components/randomChar/RandomChar.js","components/topAnime/TopAnime.js","components/pages/MainPage.js"],"sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport useAnimeServices from '../services/AnimeServices';\n\nimport { ThemContext } from '../app/App';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charsSlider.scss';\n\nconst CharsSlider = (props) => {\n    const [chars, setChars] = useState([]);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const { getTopCharacter, loading, error } = useAnimeServices();\n\n    const them = useContext(ThemContext);\n\n    const updateChar = () => {\n        getTopCharacter(250).then(loadMoreChars);\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n        setCurrentIndex((prevIndex) => (prevIndex + 1) % chars.length);\n        }, 2000);\n\n        return () => clearInterval(interval);\n    }, [chars.length]);\n\n    const loadMoreChars = (newCharList) => {\n        setChars([...newCharList]);\n    }\n\n    const extendedImages = [...chars, chars[0]];\n\n    const items = chars.map((item, index) => (\n        <li onClick={()=> props.getIdSelectAnime(item.id)} key={index} tabIndex={0} className=\"char__item\">\n            <img src={item.img} alt={item.name} />\n            <a href={item.url}><div className=\"char__name\">{item.name}</div></a>\n            <div className='char__serial'>TV Серіал</div>\n        </li>\n    ));\n\n    const content = !loading && !error ? items : null;\n    const spinner = loading ? <Spinner/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n\n    return (\n        <div className=\"char__list\">\n            <h2 style={{'color': them ? '#ffffff' : 'rgb(37, 37, 39)'}} className='char__list-title'>Популярні аніме</h2>\n            <div className=\"char__overflow\">\n                <ul style={{ transform: `translateX(-${(currentIndex * 100) / extendedImages.length}%)` }} className=\"char__grid\">\n                    {content}\n                    {spinner}\n                    {errorMessage}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default CharsSlider;","import { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ThemContext } from '../app/App';\n\nimport useAnimeServices from '../services/AnimeServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport child from '../../resources/img/child.webp';\n\nconst RandomChar = (props) => {\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, loading, error} = useAnimeServices();\n\n    const them = useContext(ThemContext);\n\n    const updateChar = () => {\n        clearError();\n        getCharacter().then(setChar)\n    }\n\n    useEffect(()=> {\n        updateChar();\n    }, []);\n\n    const spinner = loading ? <Spinner/> : null;\n    const content = (!loading && !error) ? <View getIdSelectChar={props.getIdSelectChar} char={char}/>: null;\n    const errorMessage = error ? <ErrorMessage/>: null;\n    return (\n        <>\n            <h2 style={{'color': them ? '#ffffff' : 'rgb(37, 37, 39)'}} className='randomchar__header'>Випадковий персонаж</h2>\n            <div className=\"randomchar\">\n                {spinner}  \n                {content}\n                {errorMessage} \n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Випадковий персонаж на сьогодні!<br/>\n                        Хочете познайомитися з ним ближче?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Або виберіть інший\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">спробуйте ще раз</div>\n                    </button>\n                    <img src={child} alt=\"child\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst View = (props) => {\n    const {img, about, name, url, id} = props.char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={img} alt={name} className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {about}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <Link to=\"/characters/character\" onClick={()=> props.getIdSelectChar(id)} className=\"button button__main\">\n                        <div className=\"inner\">домашня сторінка</div>\n                    </Link>\n                    <a href={url} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nView.propTypes = {\n    img: PropTypes.string,\n    name: PropTypes.string,\n    about: PropTypes.string\n}\n\nexport default RandomChar;","import { useEffect, useState, useContext } from 'react';\r\n\r\nimport { ThemContext } from '../app/App';\r\n\r\nimport useAnimeServices from '../services/AnimeServices';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './topAnime.scss';\r\n\r\nconst TopAnime = () => {\r\n\r\n    const [anime, setAnime] = useState({});\r\n\r\n    const {getTopAnime, loading, error} = useAnimeServices();\r\n\r\n    const them = useContext(ThemContext);\r\n\r\n    useEffect(()=> {\r\n        getTopAnime().then(setAnime);\r\n    }, []);\r\n\r\n    const content = !loading && anime ? <View title={anime.title} url={anime.url} img={anime.img}/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n\r\n    return (\r\n        <>\r\n            <h2 style={{'color': them ? '#ffffff' : 'rgb(37, 37, 39)'}} className='anime-header'>Рекомендація дня</h2>\r\n            <div className=\"anime-block\">\r\n                {content}\r\n                {spinner}\r\n                {errorMessage}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({title, url, img}) => {\r\n    return (\r\n        <>\r\n            <img src={img} alt=\"Anime Poster\" className=\"anime-poster\"/>\r\n            <div className=\"anime-info\">\r\n                <h2 className=\"anime-title\">{title}</h2>\r\n                <p className=\"anime-description\">Захоплива історія, що перенесе вас у світ неймовірних пригод.Пригоди, які змінять ваше уявлення про дружбу та відвагу. Досліджуйте загадковий світ разом із харизматичними героями.</p>\r\n                <button className=\"read-more-btn\"><a href={url}>Дізнатися більше</a></button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopAnime;","import CharsSlider from \"../charsSlider/CharsSlider\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport TopAnime from \"../topAnime/TopAnime\";\r\n\r\nconst MainPage = ({getIdSelectChar}) => {\r\n\r\n    return (\r\n        <>\r\n            <TopAnime/>\r\n            <CharsSlider/>\r\n            <RandomChar getIdSelectChar={getIdSelectChar}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"names":["props","chars","setChars","useState","currentIndex","setCurrentIndex","getTopCharacter","loading","error","useAnimeServices","them","useContext","ThemContext","useEffect","then","loadMoreChars","interval","setInterval","prevIndex","length","clearInterval","newCharList","extendedImages","items","map","item","index","_jsxs","onClick","getIdSelectAnime","id","tabIndex","className","children","_jsx","src","img","alt","name","href","url","content","spinner","Spinner","errorMessage","ErrorMessage","style","transform","View","about","char","Link","to","getIdSelectChar","setChar","getCharacter","clearError","updateChar","_Fragment","child","_ref","title","TopAnime","anime","setAnime","getTopAnime","CharsSlider","RandomChar"],"sourceRoot":""}